# -*- coding: utf-8 -*-
"""Lung_cancer_modal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UY05LapJvxundNaa-KZIAWGcgP90njwu
"""

from google.colab import files


uploaded = files.upload()

from google.colab import files


uploaded = files.upload()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.linear_model import LogisticRegression
from sklearn.utils.class_weight import compute_class_weight
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# 1. Load the Dataset
df = pd.read_csv("Lung_Cancer_Dataset.csv")
print("Sample rows from the dataset:")
print(df.sample(10, random_state=42))

# 2. Explore Dataset Information
df.info()

# 3. Handle Missing Values
df = df.dropna(subset=['LUNG_CANCER'])
print("Missing values per column:\n", df.isnull().sum())

# 5. Correlation Matrix
correlation_matrix = df_standardized[numerical_cols.columns].corr()
plt.subplots(figsize=(10, 10))
sns.heatmap(correlation_matrix, cmap="YlGnBu", annot=True)
plt.title('Correlation Matrix')
plt.show()

# Define encoding function for GENDER
def encode_gender(value):
    if value == "M":
        return 2
    elif value == "F":
        return 1
    return value

# Define encoding function for LUNG_CANCER
def encode_lung_cancer(value):
    if value == "YES":
        return 2
    elif value == "NO":
        return 1
    return value

# Apply the encoding functions
df["GENDER"] = df["GENDER"].apply(encode_gender)
df["LUNG_CANCER"] = df["LUNG_CANCER"].apply(encode_lung_cancer)

# Save the updated DataFrame to a new CSV file
df.to_csv("updated_lung_cancer_data.csv", index=False)

# Print a confirmation message
print("Updated CSV saved as 'updated_lung_cancer_data.csv'")
files.download("updated_lung_cancer_data.csv")

#Standardize and Normalize Numerical Features
# Standardization
numerical_cols = df.select_dtypes(exclude=['object'])
scaler = StandardScaler()
df_standardized = df.copy()
df_standardized[numerical_cols.columns] = scaler.fit_transform(df[numerical_cols.columns])

# Normalization
normalizer = MinMaxScaler()
df_normalized = df.copy()
df_normalized[numerical_cols.columns] = normalizer.fit_transform(df[numerical_cols.columns])

print("Standardized Data:\n", df_standardized.sample(10, random_state=42))
print("Normalized Data:\n", df_normalized.sample(10, random_state=42))

new_df= pd.read_csv("updated_lung_cancer_data.csv")
print(new_df.sample(10, random_state=42))
# Distribution of Age
plt.figure(figsize=(10, 6))
sns.histplot(df['AGE'], kde=True)
plt.title('Distribution of Age')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

# Distribution of Smoking
plt.figure(figsize=(10, 6))
sns.countplot(data=df, x='SMOKING')
plt.title('Distribution of Smoking')
plt.xlabel('Smoking')
plt.ylabel('Count')
plt.show()

# Distribution of Lung Cancer (Target Variable)
plt.figure(figsize=(10, 6))
sns.countplot(data=df, x='LUNG_CANCER')
plt.title('Distribution of Lung Cancer')
plt.xlabel('Lung Cancer')
plt.ylabel('Count')
plt.show()



# Relationship between Smoking and Lung Cancer
plt.figure(figsize=(10, 6))
sns.countplot(data=df, x='SMOKING', hue='LUNG_CANCER')
plt.title('Relationship between Smoking and Lung Cancer')
plt.xlabel('Smoking')
plt.ylabel('Count')
plt.show()

# 9. Data Preparation for Prediction
# Encode the target variable
# Select Features and Target Variable


# Feature selection
features = ['AGE', 'SMOKING', 'YELLOW_FINGERS', 'ANXIETY', 'PEER_PRESSURE',
            'CHRONIC DISEASE', 'WHEEZING', 'ALCOHOL CONSUMING', 'COUGHING',
            'SHORTNESS OF BREATH', 'SWALLOWING DIFFICULTY', 'CHEST PAIN']
features = [feature for feature in features if feature in new_df.columns]

X = new_df[features]  # Features
y = new_df['LUNG_CANCER']  # Target Variable

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Check if there are multiple classes in the target
unique_classes = y_train.unique()
print("Unique classes in LUNG_CANCER:", unique_classes)

# Compute class weights only if there are multiple classes
if len(unique_classes) > 1:
    class_weights = dict(enumerate(compute_class_weight(class_weight='balanced', classes=unique_classes, y=y_train)))
else:
    class_weights = None  # No class weights if only one class

# Train Logistic Regression Model
log_reg = LogisticRegression(max_iter=1000, class_weight="balanced")
log_reg.fit(X_train, y_train)

# Evaluate the Model
def evaluate_model(y_test, y_pred):
    print("\nModel Evaluation:")
    print(f"Accuracy: {accuracy_score(y_test, y_pred):.2f}")
    print(f"Precision: {precision_score(y_test, y_pred, average='weighted'):.2f}")
    print(f"Recall: {recall_score(y_test, y_pred, average='weighted'):.2f}")
    print(f"F1 Score: {f1_score(y_test, y_pred, average='weighted'):.2f}")

y_pred = log_reg.predict(X_test)
evaluate_model(y_test, y_pred)

# Predict on New User Input
def get_user_input():
    user_data = {}
    print("\nPlease enter the following information:")
    user_data['AGE'] = int(input("Age: "))
    user_data['SMOKING'] = int(input("Smoking (2 for Yes, 1 for No): "))
    user_data['YELLOW_FINGERS'] = int(input("Yellow Fingers (2 for Yes, 1 for No): "))
    user_data['ANXIETY'] = int(input("Anxiety (2 for Yes, 1 for No): "))
    user_data['PEER_PRESSURE'] = int(input("Peer Pressure (2 for Yes, 1 for No): "))
    user_data['CHRONIC DISEASE'] = int(input("Chronic Disease (2 for Yes, 1 for No): "))
    user_data['WHEEZING'] = int(input("Wheezing (2 for Yes, 1 for No): "))
    user_data['ALCOHOL CONSUMING'] = int(input("Alcohol Consuming (2 for Yes, 1 for No): "))
    user_data['COUGHING'] = int(input("Coughing (2 for Yes, 1 for No): "))
    user_data['SHORTNESS OF BREATH'] = int(input("Shortness of Breath (2 for Yes, 1 for No): "))
    user_data['SWALLOWING DIFFICULTY'] = int(input("Swallowing Difficulty (2 for Yes, 1 for No): "))
    user_data['CHEST PAIN'] = int(input("CHEST PAIN (2 for Yes, 1 for No): "))

    return user_data

user_input = get_user_input()
user_input_df = pd.DataFrame([user_input])

# Scale user input
user_input_scaled = scaler.transform(user_input_df)

# Predict
yhat = log_reg.predict(user_input_scaled)
print(f"\nPrediction: {'Yes (Lung Cancer Detected)' if yhat[0] == 2 else 'No (No Lung Cancer)'}")